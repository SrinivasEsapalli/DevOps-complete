AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys a VPC.
Parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  VPCName:
    Description: Please enter the name for this VPC
    Type: String
    Default: VPC-From-CFT
  publicSubnetName:
    Description: Please enter the name for this public subnet
    Type: String
    Default: publicSubnet
  privateSubnetName:
    Description: Please enter the name for this public subnet
    Type: String
    Default: privateSubnet
  publicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for this public subnet
    Type: String
    Default: 10.0.10.0/24
  publicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for this public subnet
    Type: String
    Default: 10.0.20.0/24
  privateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for this private subnet
    Type: String
    Default: 10.0.30.0/24
  loadBalanacer1SubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for this private subnet
    Type: String
    Default: 10.0.40.0/24
  loadBalanacer2SubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for this private subnet
    Type: String
    Default: 10.0.50.0/24
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: false
      Tags:
      - Key: Name
        Value: !Ref VPCName
  myVPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, and HTTPS traffic
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
  publicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref publicSubnetCIDR
      AvailabilityZone: "us-east-1d"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref publicSubnetName
  ## one more public subnet
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref publicSubnet2CIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: public-subnet2



  ## load balancer subnet
  loadBalancer:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref loadBalanacer1SubnetCIDR
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: lb1


  ## load balancer subnet
  loadBalancer2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref loadBalanacer2SubnetCIDR
      AvailabilityZone: "us-east-1d"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: lb2

  privateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
    VpcId: !Ref myVPC
    CidrBlock: !Ref privateSubnetCIDR
    AvailabilityZone: "us-east-1a"
    MapPublicIpOnLaunch: false
    Tags:
    - Key: Name
      Value: !Ref privateSubnetName

  #EC2-instance launch
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ae8f15ae66fe8cda
      InstanceType: t2.micro
      KeyName: dummy
      SubnetId: !Ref publicSubnet
      SecurityGroupIds:
      - !Ref myVPCSecurityGroup
      Tags:
      - Key: Name
        Value: instance1
  # in public subnet 2
  MyEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0ae8f15ae66fe8cda
      InstanceType: t2.micro
      KeyName: dummy
      SubnetId: !Ref publicSubnet2
      SecurityGroupIds:
      - !Ref myVPCSecurityGroup
      Tags:
      - Key: Name
        Value: instance2
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Rt1
  mySubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet
  mylbSubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref loadBalancer
  mylb2SubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref loadBalancer2
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Rt2
  mySubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet

  mySubnetPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  defaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

    #NatGateway1EIP:
    #  Type: AWS::EC2::EIP
    #  DependsOn: InternetGatewayAttachment
    # Properties:
    #   Domain: vpc
    #NatGateway:
    # Type: AWS::EC2::NatGateway
    # Properties:
    # AllocationId: !GetAtt NatGateway1EIP.AllocationId
    #SubnetId: !Ref publicSubnet 
    #NatGatewayPrivateRoute:
    # Type: AWS::EC2::Route
    # DependsOn: InternetGatewayAttachment
    #Properties:
    #  RouteTableId: !Ref privateRouteTable
  # DestinationCidrBlock: 0.0.0.0/0
  # NatGatewayId: !Ref NatGateway 


  ## Elastic IP

  # myEIP:
  #  Type: AWS::EC2::EIP
  # Properties:
  #  InstanceId: !Ref MyEC2Instance


  ###############  load balancer #############
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
      - !Ref myVPCSecurityGroup
      Subnets:
      - !Ref loadBalancer
      - !Ref loadBalancer2
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      IpAddressType: ipv4
      Name: req-resp-lb
      Type: application

  ## load balancer listener
  listenerLB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref targetGroupEc2
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ## load balancer target group
  targetGroupEc2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ec2-target-group
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      IpAddressType: ipv4
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Targets:
      - Id: !Ref MyEC2Instance
      - Id: !Ref MyEC2Instance2
      TargetType: instance
      VpcId: !Ref myVPC






